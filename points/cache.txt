redis与memcache区别：
		memcache只有KV数据类型，无法实现持久化，100k以上数据性能相比redis更高
redis：
	单进程、单线程
	
	数据类型：
					String--->set key value、get key、incr key
					Hash--->hmset boy name “bob” age 18 desc "didi"
									hget boy age
									hset boy age 19
					list--->lpush list aaa、rpush list aaa、lpop list、lrange list 0 10      后进先出
					set--->sadd set aaa、smenbers set 		无序不重复
					sorted set--->zadd set 1 aaa、zrangebyscore set 0 10			根据序列排序，不重复
	list：PUSH输入A B C D E F
				lpush结构（lrange结果）：FEDCBA			即新进的往左放
				rpush结构（lrange结果）：ABCDEF			即新进的往右放
			lrange输出：A B C D E F
				lpop结果：A B C D E F						先拿左边的
				rpop结果：F E D C B A						先拿右边的
	redis队列：
					blpop list  60			阻塞60秒获取list的消息
			topic模式：
					subscribe myTopic
					publish myTopic ”message“
			
	其他指令：
					keys k*
					scan 0 match k* count 10			SCAN cursor [MATCH pattern] [COUNT count]		遍历
					setnx lock value
					set lock value ex 10 nx
缓存雪崩：
				某一时刻大量缓存同时失效（同时到期，或者服务器宕机），请求全部发送到数据库。
				应该给每个key的到期值加个随机值，同时做好集群。或者限流、降级、熔断
缓存击穿：
				大量并发请求过来时某个key的刚好失效（缓存没了，被击穿），请求全部请求数据库。
				永不过期；或应该使用锁，第一个请求没有获取到缓存，(lock)然后请求数据库并缓存(finally unlock)，其他请求就可以获取缓存了
缓存穿透：
				大量恶意请求获取不存在的key，导致请求全部指向数据库。（缓存正常，但是每个请求都越过了缓存）
				应该在缓存上一层加过滤器
持久化：
			rdb：快照文件小恢复快
			aof：可读性高，不易丢失、体积大、恢复慢
			默认：RDB-AOF混合持久化
双写一致性：
			先写数据库 后删缓存		why：如果相反，第二个线程过来发现缓存为空，这时读取数据库会获取到脏数据
			缺点：A写->删  B读  C写->删  B写(脏数据) 

分布式锁
	redisTemplate.opsForValue().setIfAbsent()，相当于SETNX 命令

	Redisson 的分布式可重入锁 RLock lock = redisson.getLock("lock");
	只有未指定锁超时时间，才会使用到 Watch Dog 自动续期机制。

